package com.example.taptwisttunes;

import java.io.File;
import java.io.IOException;

import com.example.taptwisttunes.utils.TunnelPlayerWorkaround;
import com.example.taptwisttunes.visualizer.VisualizerView;
import com.example.taptwisttunes.visualizer.renderer.BarGraphRenderer;

import android.support.v7.app.ActionBarActivity;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;
import android.media.AudioManager;
import android.media.MediaMetadataRetriever;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.TextView;

public class Import extends ActionBarActivity {

	ImageButton browse, stop, play, pause;
	TextView song;
	MediaPlayer mediaPlayer;
	private MediaPlayer mSilentPlayer;  /* to avoid tunnel player issue */
	private VisualizerView mVisualizerView;
	private static final int READ_REQUEST_CODE = 42;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, 
				WindowManager.LayoutParams.FLAG_FULLSCREEN); 
		setContentView(R.layout.activity_import);
		
		browse = (ImageButton) findViewById(R.id.bUpload);
		play = (ImageButton) findViewById(R.id.bPlay);
		pause = (ImageButton) findViewById(R.id.bPause);
		stop = (ImageButton) findViewById(R.id.bStop);
		song = (TextView) findViewById(R.id.songTitle);
		
        //this stops the music playing 
		stop.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (mediaPlayer!=null) {
					mediaPlayer.release();
					mediaPlayer = null;
				}
			}
		});
		
		pause.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
					mediaPlayer.pause();
			}
		});
		
		play.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
					mediaPlayer.start();
			}
		});
	
    //open a file browser to select an audio file
		browse.setOnClickListener(new View.OnClickListener() {
		
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				browse(v);
			}
		});
	}
		
	// open the file browser to select a song
	private void browse(View v) {
		// TODO Auto-generated method stub
		Intent browseIntent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
		browseIntent.addCategory(Intent.CATEGORY_OPENABLE);
		browseIntent.setType("*/*");
		startActivityForResult(browseIntent, READ_REQUEST_CODE);
	}
	
	public void onActivityResult(int requestCode, int resultCode, Intent resultData) {
	    if (requestCode == READ_REQUEST_CODE && resultCode == Activity.RESULT_OK) {
	        // The document selected by the user won't be returned in the intent.
	        // Instead, a URI to that document will be contained in the return intent
	        // provided to this method as a parameter.
	        // Pull that URI using resultData.getData().
	        Uri browseUri = null;
	        if (resultData != null) {
	        	browseUri = resultData.getData();
	        	if(mediaPlayer != null) mediaPlayer.release();
	        	mediaPlayer = new MediaPlayer();
	        	mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
	        	try {
					mediaPlayer.setDataSource(getApplicationContext(), browseUri);
				} catch (IllegalArgumentException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SecurityException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            try {
					mediaPlayer.prepare();
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            //song plays
	            mediaPlayer.start();
	            // We need to link the visualizer view to the media player so that
	            // it displays something
	            mVisualizerView = (VisualizerView) findViewById(R.id.visualizerView);
	            mVisualizerView.link(mediaPlayer);
	            addBarGraphRenderers();
	        }
	    }
	}
	
	//Trying to get the song title
	/*private void getTrackInfo(Uri audioFileUri) {
	    MediaMetadataRetriever metaRetriever= new MediaMetadataRetriever();
	    metaRetriever.setDataSource(getRealPathFromURI(audioFileUri));
	    String title = metaRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
	    song.setText(title);
	}


	private String getRealPathFromURI(Uri browseUri) {
	    File myFile = new File(browseUri.getPath().toString());
	    String s = myFile.getAbsolutePath();
	    return s;
	}*/
	
    private void initTunnelPlayerWorkaround() {
    		// Read "tunnel.decode" system property to determine
		    // the workaround is needed
		    if (TunnelPlayerWorkaround.isTunnelDecodeEnabled(this)) {
		      mSilentPlayer = TunnelPlayerWorkaround.createSilentMediaPlayer(this);
		    }
		  }
    
	 // Methods for adding renderers to visualizer
	private void addBarGraphRenderers() {
	    Paint paint = new Paint();
	    paint.setStrokeWidth(50f);
	    paint.setAntiAlias(true);
	    paint.setColor(Color.argb(200, 46, 204, 113));
	    BarGraphRenderer barGraphRendererBottom = new BarGraphRenderer(16, paint, false);
	    mVisualizerView.addRenderer(barGraphRendererBottom);

	    Paint paint2 = new Paint();
	    paint2.setStrokeWidth(50f);
	    paint2.setAntiAlias(true);
	    paint2.setColor(Color.argb(200, 231, 76, 60));
	    BarGraphRenderer barGraphRendererTop = new BarGraphRenderer(16, paint2, true);
	    mVisualizerView.addRenderer(barGraphRendererTop);
	  }
}
